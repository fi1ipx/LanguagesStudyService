{"version":3,"sources":["components/header/header.js","components/words/tableHeader.js","components/dictionaryLinks/dictionaryLinks.js","components/loader/loader.js","components/words/words.js","components/groups/groups.js","components/examples/examples.js","components/examples/practice.js","App.js","serviceWorker.js","index.js"],"names":["header","react_default","a","createElement","className","id","href","tableHeader","scope","dictionaryLinks","props","word","Fragment","rel","target","loader","role","Words","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textareaHandleChange","e","setState","wordsToAdd","value","handleCheckBoxSelect","selectedValues","state","selectedWords","slice","checked","push","delIndex","indexOf","splice","showAddWordsToGroup","length","handleSubmit","fetch","concat","window","rest","apiUrl","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","words","then","fetchWords","catch","err","console","log","preventDefault","handleAddToTheGroup","groupId","selectedGroupId","wordIds","handleChangeGroup","deleteWord","wordId","groups","undefined","isLoading","fetchGroups","_this2","resp","json","data","_this3","_this4","_this$state","addToGroupVisible","onSubmit","htmlFor","rows","onChange","type","map","item","key","lastPractice","examples","createdAt","name","data-toggle","data-placement","title","el","text","join","onClick","style","display","React","Component","Groups","newGroupName","newGroupNameHandleChange","handleGroupClick","selectedGroup","deleteGroup","Examples","deleteExample","fetchExamples","that","wordCreatedAt","exampleToAdd","fetchTheWord","Number","match","params","response","App","react_router_dom","react_router","exact","path","component","Practice","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31a0410e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function header() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/\">Words</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/example\">Examples</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/groups\">Groups</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}","import React from \"react\";\n\nexport default function tableHeader() {\n    return (\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">The word</th>\n            <th scope=\"col\" className=\"d-lg-none\">Word id</th>\n            <th scope=\"col\">Added</th>\n            <th scope=\"col\">Practiced</th>\n            <th scope=\"col\">Last</th>\n            <th scope=\"col\">Dictionaries</th>\n            <th scope=\"col\">Practice</th>\n            <th scope=\"col\">Manage</th>\n        </tr>\n        </thead>\n    )\n}","import React from \"react\";\n\nexport default function dictionaryLinks(props) {\n    const word = props.word;\n\n    return (\n        <React.Fragment>\n            <a href={\"https://translate.google.ru/#view=home&op=translate&sl=en&tl=ru&text=\" + word}\n               className=\"badge badge-primary\" rel=\"noopener noreferrer\" target=\"_blank\">G</a>&nbsp;\n            <a href={\"https://dictionary.cambridge.org/dictionary/english/\" + word}\n               className=\"badge badge-secondary\" rel=\"noopener noreferrer\" target=\"_blank\">C</a>&nbsp;\n            <a href={\"https://www.urbandictionary.com/define.php?term=\" + word}\n               className=\"badge badge-info\" rel=\"noopener noreferrer\" target=\"_blank\">U</a>&nbsp;\n            <a href={\"https://www.dictionary.com/browse/\" + word}\n               className=\"badge badge-light\" rel=\"noopener noreferrer\" target=\"_blank\">D</a>&nbsp;\n            <a href={\"https://youglish.com/search/\" + word + \"/us\"}\n               className=\"badge badge-danger\" rel=\"noopener noreferrer\" target=\"_blank\">Y</a>\n        </React.Fragment>\n    )\n}\n","import React from \"react\";\n\nexport default function loader() {\n    return (<div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>)\n}","import React from 'react';\nimport TableHeader from \"./tableHeader\";\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\nimport Loader from \"../loader/loader\";\n\nexport default class Words extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            words: [],\n            groups: [],\n            selectedWords: [],\n            wordsToAdd: '',\n            showAddWordsToGroup: false,\n            selectedGroupId: undefined,\n            isLoading: true,\n        }\n    }\n\n    componentDidMount() {\n        this.fetchWords();\n        this.fetchGroups();\n    }\n\n    fetchWords() {\n        this.setState({isLoading: true});\n        fetch(`${window.rest.apiUrl}/api/word`)\n            .then((resp) => resp.json())\n            .then((data) => {\n                this.setState({words: data, isLoading: false})\n            })\n    }\n\n    fetchGroups() {\n        fetch(`${window.rest.apiUrl}/api/group`)\n            .then((resp) => resp.json())\n            .then((data) => {\n                this.setState({groups: data})\n            })\n    }\n\n    textareaHandleChange = (e) => {\n        this.setState({wordsToAdd: e.target.value});\n    };\n\n    handleCheckBoxSelect = (e) => {\n        const selectedValues = this.state.selectedWords.slice();\n        if (e.target.checked) {\n            selectedValues.push(e.target.value);\n        } else {\n            const delIndex = selectedValues.indexOf(e.target.value);\n            selectedValues.splice(delIndex, 1);\n        }\n        const showAddWordsToGroup = selectedValues.length > 0;\n        this.setState({\n            selectedWords: selectedValues,\n            showAddWordsToGroup,\n        })\n    };\n\n    handleSubmit = (e) => {\n        fetch(`${window.rest.apiUrl}/api/word/create-word-list`, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: JSON.stringify({words: this.state.wordsToAdd})\n        })\n            .then(() => {\n                this.setState({wordsToAdd: ''});\n                this.fetchWords();\n            })\n            .catch(err => console.log(err));\n        e.preventDefault();\n    };\n\n    handleAddToTheGroup = (e) => {\n        fetch(`${window.rest.apiUrl}/api/group/add-group-members`, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: JSON.stringify({\n                groupId: this.state.selectedGroupId,\n                wordIds: this.state.selectedWords,\n            })\n        })\n            .then(() => {\n                this.setState({selectedWords: [], selectedGroupId: null});\n            })\n            .catch(err => console.log(err));\n    };\n\n    handleChangeGroup = (e) => {\n        this.setState({selectedGroupId: e.target.value});\n    };\n\n    deleteWord = (e, wordId) => {\n        e.preventDefault();\n        fetch(`${window.rest.apiUrl}/api/word/${wordId}`, {\n            method: 'DELETE',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n        })\n            .then(() => {\n                this.fetchWords();\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        const {words, showAddWordsToGroup, groups, isLoading} = this.state;\n        const addToGroupVisible = showAddWordsToGroup ? 'block' : 'none';\n\n        return (\n            <div id=\"test\" className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                    <br/>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"newWordsTextarea\">Put new words here</label>\n                        <textarea\n                            className=\"form-control\"\n                            rows=\"3\"\n                            value={this.state.wordsToAdd}\n                            onChange={this.textareaHandleChange}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-outline-success\">\n                        Add words\n                    </button>\n                </form>\n                <br/>\n                {\n                    isLoading ? <Loader/> :\n                    <table className=\"table table-striped\">\n                        <TableHeader/>\n                        <tbody id=\"tbody\">\n                        {\n                            words ?\n                                words.map((item, key) => {\n                                    let lastPractice;\n                                    if (item.examples.length > 0) {\n                                        lastPractice = item.examples[item.examples.length - 1].createdAt\n                                    } else {\n                                        lastPractice = 'never';\n                                    }\n                                    return <tr key={item.id}>\n                                        <th scope=\"row\">{key + 1}</th>\n                                        <td>{item.name}</td>\n                                        <td>{item.createdAt}</td>\n                                        <td>\n                                            <div data-toggle=\"tooltip\"\n                                                 data-placement=\"top\"\n                                                 title={\n                                                     item.examples.map(function (el) {\n                                                         return el.text;\n                                                     }).join('\\n')}\n                                            >\n                                                {item.examples.length}\n                                            </div>\n                                        </td>\n                                        <td>{lastPractice}</td>\n                                        <td><DictionaryLinks word={item.name}/></td>\n                                        <td>\n                                            <a\n                                                rel=\"noopener noreferrer\" target=\"_blank\"\n                                                href={'/practice/' + item.id}>\n                                                Practice\n                                            </a>\n                                        </td>\n                                        <td>\n                                            <input value={item.id} type=\"checkbox\"\n                                                   onChange={this.handleCheckBoxSelect}/>\n                                            &nbsp;|&nbsp;\n                                            <a href={\"delete/\" + item.id} onClick={e => {\n                                                this.deleteWord(e, item.id)\n                                            }}>Del</a>\n                                            &nbsp;|&nbsp;\n                                            <a href={item.id} onClick={e => {\n                                                e.preventDefault()\n                                            }}>Edit</a>\n                                        </td>\n                                    </tr>\n                                })\n                                :\n                                null\n                        }\n                        </tbody>\n                    </table>\n                }\n                <br/>\n                <div className=\"form-group\" style={{display: addToGroupVisible}}>\n                    <label htmlFor=\"newWordsTextarea\">Select a word group&nbsp;</label>\n                    <select onChange={this.handleChangeGroup} value={this.state.selectedGroupId}>\n                        {\n                            groups ?\n                                groups.map((item, key) => {\n                                    return <option key={item.id} value={item.id}>\n                                        [{item.createdAt}]\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                        {item.name}\n                                    </option>\n                                })\n                                :\n                                null\n                        }\n                    </select>\n                    &nbsp;\n                    <button className=\"btn btn-outline-success\" onClick={this.handleAddToTheGroup}>\n                        Add words to the group\n                    </button>\n                </div>\n            </div>\n        )\n\n    }\n}","import React from 'react';\nimport TableHeader from \"../words/tableHeader\";\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\n\nexport default class Groups extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            words: [],\n            groups: [],\n            selectedWords: [],\n            newGroupName: '',\n            selectedGroup: null,\n        }\n    }\n\n    componentDidMount() {\n        this.fetchGroups();\n    }\n\n    fetchGroups() {\n        fetch(`${window.rest.apiUrl}/api/group`)\n            .then((resp) => resp.json())\n            .then((data) => {\n                this.setState({groups: data})\n            })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.newGroupName.length > 0) {\n            fetch(`${window.rest.apiUrl}/api/group`, {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                redirect: 'follow',\n                referrer: 'no-referrer',\n                body: JSON.stringify(\n                    {\n                        name: this.state.newGroupName,\n                    }\n                )\n            })\n                .then(() => {\n                    this.setState({newGroupName: ''});\n                    this.fetchGroups();\n                })\n                .catch(err => console.log(err));\n        }\n    };\n\n    newGroupNameHandleChange = (e) => {\n        this.setState({newGroupName: e.target.value});\n    };\n\n    handleGroupClick = (e, key) => {\n        e.preventDefault();\n        const selectedGroup = this.state.groups[key];\n        this.setState({words: this.state.groups[key].words, selectedGroup: selectedGroup});\n    };\n\n    deleteGroup = (e, id) => {\n        e.preventDefault();\n        e.preventDefault();\n        fetch(`${window.rest.apiUrl}/api/group/${id}`, {\n            method: 'DELETE',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n        })\n            .then(() => {\n                this.fetchGroups()\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        const {groups, words, selectedGroup} = this.state;\n\n        return (\n            <div id=\"test\" className=\"container\">\n                <h2>Manage groups</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <br/>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"newWordsTextarea\">New group name&nbsp;</label>\n                        <input\n                            value={this.state.newGroupName}\n                            onChange={this.newGroupNameHandleChange}\n                            type={\"text\"}\n                        />&nbsp;\n                        <button type=\"submit\" className=\"btn btn-outline-success\">\n                            Create group\n                        </button>\n                    </div>\n                </form>\n                <ul>\n                    {\n                        groups ?\n                            groups.map((item, key) => {\n                                return <li key={item.id}>\n                                    <a href={\"delete/\" + item.id} onClick={e => {\n                                        this.deleteGroup(e, item.id)\n                                    }}>Del</a>\n                                    [{item.createdAt}]\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <a href={item.id} onClick={(e) => this.handleGroupClick(e, key)} key={key}>\n                                        {item.name}\n                                    </a>\n                                </li>\n\n                            })\n                            :\n                            null\n                    }\n                </ul>\n                {selectedGroup ?\n                    <div>\n                        <h1>{selectedGroup.name}</h1>\n                        <table className=\"table table-striped\">\n                            <TableHeader/>\n                            <tbody>\n                            {\n                                words ?\n                                    words.map((item, key) => {\n                                        let lastPractice;\n                                        if (item.examples.length > 0) {\n                                            lastPractice = item.examples[item.examples.length - 1].createdAt\n                                        } else {\n                                            lastPractice = 'never';\n                                        }\n                                        return <tr key={item.id}>\n                                            <th scope=\"row\">{key + 1}</th>\n                                            <td>{item.name}</td>\n                                            <td>{item.createdAt}</td>\n                                            <td>{item.examples.length}</td>\n                                            <td>{lastPractice}</td>\n                                            <td><DictionaryLinks word={item.name}/></td>\n                                            <td>\n                                                <a\n                                                    rel=\"noopener noreferrer\" target=\"_blank\"\n                                                    href={'/practice/' + item.id}>\n                                                    Practice\n                                                </a>\n                                            </td>\n                                            <td>\n                                                <a href={item.id} onClick={e => {e.preventDefault()}}>Del</a>\n                                                &nbsp;|&nbsp;\n                                                <a href={item.id} onClick={e => {e.preventDefault()}}>Edit</a>\n                                            </td>\n                                        </tr>\n                                    })\n                                    :\n                                    null\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                    : null}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\nimport Loader from \"../loader/loader\";\n\nexport default class Examples extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            examples: [],\n            isLoading: true,\n        }\n    }\n\n    componentDidMount() {\n        this.fetchExamples();\n    }\n\n    fetchExamples() {\n        this.setState({isLoading: true});\n        const that = this;\n        fetch(`${window.rest.apiUrl}/api/example`)\n            .then((resp) => resp.json())\n            .then(function (data) {\n                that.setState({examples: data, isLoading: false});\n            })\n    }\n\n    deleteExample = (e, id) => {\n        e.preventDefault();\n        fetch(`${window.rest.apiUrl}/api/example/${id}`, {\n            method: 'DELETE',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n        })\n            .then(() => {\n                this.fetchExamples();\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        const {examples, isLoading} = this.state;\n\n        return (\n            <div id=\"test\" className=\"container\">\n                {\n                    isLoading ? <Loader/> :\n                        <table className=\"table table-striped\">\n                            <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">The word</th>\n                                <th scope=\"col\">Example</th>\n                                <th scope=\"col\">Dictionaries</th>\n                                <th scope=\"col\">Example date</th>\n                                <th scope=\"col\">Word date</th>\n                                <th scope=\"col\">Manage</th>\n                            </tr>\n                            </thead>\n                            <tbody id=\"tbody\">\n                            {\n                                examples ?\n                                    examples.map((item, key) => {\n\n                                        return <tr key={item.id}>\n                                            <th scope=\"row\">{key + 1}</th>\n                                            <td>\n                                                <a\n                                                    rel=\"noopener noreferrer\" target=\"_blank\"\n                                                    href={'/practice/' + item.wordId}>\n                                                    {item.word}\n                                                </a>\n                                            </td>\n                                            <td>{item.text}</td>\n                                            <td><DictionaryLinks word={item.word}/></td>\n                                            <td>{item.createdAt}</td>\n                                            <td>{item.wordCreatedAt}</td>\n                                            <td>\n                                                <a href={\"delete/\" + item.id} onClick={e => {\n                                                    this.deleteExample(e, item.id)\n                                                }}>Del</a>\n                                            </td>\n                                        </tr>\n                                    })\n                                    :\n                                    null\n                            }\n                            </tbody>\n                        </table>\n                }\n            </div>\n        )\n    }\n}","import React from 'react';\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\n\nexport default class Examples extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            word: '',\n            wordCreatedAt: '',\n            wordId: Number(props.match.params.id),\n            examples: [],\n            exampleToAdd: '',\n        }\n    }\n\n    componentDidMount() {\n        this.fetchTheWord();\n    }\n\n    fetchTheWord() {\n        const that = this;\n        fetch(`${window.rest.apiUrl}/api/word/${this.state.wordId}`)\n            .then((response) => response.json())\n            .then(function (data) {\n                that.setState({\n                    examples: data.examples,\n                    word: data.name,\n                    wordCreatedAt: data.createdAt,\n                });\n            })\n    }\n\n    textareaHandleChange = (e) => {\n        this.setState({exampleToAdd: e.target.value});\n    };\n\n    handleSubmit = (e) => {\n        fetch(`${window.rest.apiUrl}/api/word/example`, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: JSON.stringify(\n                {\n                    wordId: this.state.wordId,\n                    text: this.state.exampleToAdd\n                }\n            )\n        })\n            .then(() => {\n                this.setState({exampleToAdd: ''});\n                this.fetchTheWord();\n            })\n            .catch(err => console.log(err));\n        e.preventDefault();\n    };\n\n    render() {\n        const {examples} = this.state;\n        return (\n            <div id=\"test\" className=\"container\">\n                <h2>{this.state.word} [added {this.state.wordCreatedAt}]</h2>\n                <DictionaryLinks word={this.state.word} />\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleTextarea\">Type example here</label>\n                        <textarea\n                            className=\"form-control\"\n                            value={this.state.exampleToAdd}\n                            onChange={this.textareaHandleChange}\n                            rows=\"3\"/>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-outline-success\">Add example</button>\n                </form>\n                <div>\n                    <ul className=\"list-group list-group-flush\" id=\"examplesList\">\n                        {\n                            examples ?\n                                examples.map((item, key) => {\n                                    return <li className=\"list-group-item\" key={key}>\n                                        [{item.createdAt}]\n                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                        {item.text}\n                                    </li>\n                                })\n                                :\n                                null\n                        }\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Header from './components/header/header';\nimport Words from './components/words/words';\nimport Groups from './components/groups/groups';\nimport Examples from './components/examples/examples';\nimport Practice from './components/examples/practice';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction App() {\n\n        return (\n            <BrowserRouter>\n                <Header/>\n                <Route exact path={\"/\"} component={Words}/>\n                <Route exact path={\"/example\"} component={Examples}/>\n                <Route exact path={\"/practice/:id\"} component={Practice}/>\n                <Route exact path={\"/groups\"} component={Groups}/>\n                <footer>\n                    &nbsp;&copy; 2019 Language study service\n                </footer>\n            </BrowserRouter>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}