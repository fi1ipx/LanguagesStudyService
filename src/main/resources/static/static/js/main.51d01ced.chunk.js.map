{"version":3,"sources":["components/header/header.js","components/words/tableHeader.js","components/dictionaryLinks/dictionaryLinks.js","components/words/words.js","components/examples/examples.js","components/examples/practice.js","App.js","serviceWorker.js","index.js"],"names":["header","react_default","a","createElement","className","id","href","tableHeader","scope","dictionaryLinks","props","word","Fragment","rel","target","Words","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textareaHandleChange","e","setState","wordsToAdd","value","handleSubmit","fetch","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","words","state","then","fetchWords","catch","err","console","log","preventDefault","_this2","resp","json","data","onSubmit","htmlFor","rows","onChange","type","map","item","key","lastPractice","examples","length","createdAt","name","React","Component","Examples","fetchExamples","that","text","wordCreatedAt","exampleToAdd","wordId","Number","match","params","response","App","react_router_dom","react_router","exact","path","component","Practice","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51d01ced.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function header() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/\">Words</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"/example\">Examples</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}","import React from \"react\";\n\nexport default function tableHeader() {\n    return (\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">The word</th>\n            <th scope=\"col\" className=\"d-lg-none\">Word id</th>\n            <th scope=\"col\">Added</th>\n            <th scope=\"col\">Practiced</th>\n            <th scope=\"col\">Last</th>\n            <th scope=\"col\">Dictionaries</th>\n            <th scope=\"col\">Practice</th>\n            <th scope=\"col\">Manage</th>\n        </tr>\n        </thead>\n    )\n}","import React from \"react\";\n\nexport default function dictionaryLinks(props) {\n    const word = props.word;\n\n    return (\n        <React.Fragment>\n            <a href={\"https://translate.google.ru/#view=home&op=translate&sl=en&tl=ru&text=\" + word}\n               className=\"badge badge-primary\" rel=\"noopener noreferrer\" target=\"_blank\">G</a>&nbsp;\n            <a href={\"https://dictionary.cambridge.org/dictionary/english/\" + word}\n               className=\"badge badge-secondary\" rel=\"noopener noreferrer\" target=\"_blank\">C</a>&nbsp;\n            <a href={\"https://www.urbandictionary.com/define.php?term=\" + word}\n               className=\"badge badge-info\" rel=\"noopener noreferrer\" target=\"_blank\">U</a>&nbsp;\n            <a href={\"https://www.dictionary.com/browse/\" + word}\n               className=\"badge badge-light\" rel=\"noopener noreferrer\" target=\"_blank\">D</a>&nbsp;\n            <a href={\"https://youglish.com/search/\" + word + \"/us\"}\n               className=\"badge badge-danger\" rel=\"noopener noreferrer\" target=\"_blank\">Y</a>\n        </React.Fragment>\n    )\n}\n","import React from 'react';\nimport TableHeader from \"./tableHeader\";\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\n\nexport default class Words extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            words: [],\n            wordsToAdd: '',\n        }\n    }\n\n    componentDidMount() {\n        this.fetchWords();\n    }\n\n    fetchWords() {\n        fetch('/api/word')\n            .then((resp) => resp.json())\n            .then((data) => {\n                this.setState({words: data})\n            })\n    }\n\n    textareaHandleChange = (e) => {\n        this.setState({wordsToAdd: e.target.value});\n    };\n\n    handleSubmit = (e) => {\n        fetch('/api/word/create-word-list', {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: JSON.stringify({words: this.state.wordsToAdd})\n        })\n            .then(() => {\n                this.setState({wordsToAdd: ''});\n                this.fetchWords();\n            })\n            .catch(err => console.log(err));\n        e.preventDefault();\n    };\n\n    render() {\n        const {words} = this.state;\n\n        return (\n            <div id=\"test\" className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                    <br/>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"newWordsTextarea\">Put new words here</label>\n                        <textarea\n                            className=\"form-control\"\n                            rows=\"3\"\n                            value={this.state.wordsToAdd}\n                            onChange={this.textareaHandleChange}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-outline-success\">\n                        Add words\n                    </button>\n                </form>\n                <br/>\n                <table className=\"table table-striped\">\n                    <TableHeader/>\n                    <tbody id=\"tbody\">\n                    {\n                        words ?\n                            words.map((item, key) => {\n                                let lastPractice;\n                                if (item.examples.length > 0) {\n                                    lastPractice = item.examples[item.examples.length-1].createdAt\n                                } else {\n                                    lastPractice = 'never';\n                                }\n                                return <tr key={item.id}>\n                                    <th scope=\"row\">{key+1}</th>\n                                    <td>{item.name}</td>\n                                    <td>{item.createdAt}</td>\n                                    <td>{item.examples.length}</td>\n                                    <td>{lastPractice}</td>\n                                    <td><DictionaryLinks word={item.name} /></td>\n                                    <td><a href={'/practice/' + item.id}>Practice</a></td>\n                                    <td>{item.name}</td>\n                                </tr>\n                            })\n                            :\n                            null\n                    }\n                    </tbody>\n                </table>\n            </div>\n        )\n\n    }\n}","import React from 'react';\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\n\nexport default class Examples extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            examples: [],\n        }\n    }\n\n    componentDidMount() {\n        this.fetchExamples();\n    }\n\n    fetchExamples() {\n        console.log(this);\n        const that = this;\n        fetch('/api/example')\n            .then((resp) => resp.json())\n            .then(function (data) {\n                that.setState({examples: data});\n                console.log(data);\n            })\n    }\n\n    render() {\n        const { examples } = this.state;\n\n        return (\n            <div id=\"test\" className=\"container\">\n                <table className=\"table table-striped\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">The word</th>\n                        <th scope=\"col\">Example</th>\n                        <th scope=\"col\">Dictionaries</th>\n                        <th scope=\"col\">Example date</th>\n                        <th scope=\"col\">Word date</th>\n                    </tr>\n                    </thead>\n                    <tbody id=\"tbody\">\n                    {\n                        examples ?\n                            examples.map((item, key) => {\n\n                                return <tr key={item.id}>\n                                    <th scope=\"row\">{key+1}</th>\n                                    <td>{item.word}</td>\n                                    <td>{item.text}</td>\n                                    <td><DictionaryLinks word={item.word}/></td>\n                                    <td>{item.createdAt}</td>\n                                    <td>{item.wordCreatedAt}</td>\n                                </tr>\n                            })\n                            :\n                            null\n                    }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Examples extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            wordId: Number(props.match.params.id),\n            examples: [],\n            exampleToAdd: '',\n        }\n    }\n\n    componentDidMount() {\n        this.fetchExamples();\n    }\n\n    fetchExamples() {\n        const that = this;\n        fetch('/api/word/' + this.state.wordId + '/examples')\n            .then((response) => response.json())\n            .then(function (data) {\n                that.setState({examples: data});\n            })\n    }\n\n    textareaHandleChange = (e) => {\n        this.setState({exampleToAdd: e.target.value});\n    };\n\n    handleSubmit = (e) => {\n        fetch('/api/word/example', {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: JSON.stringify(\n                {\n                    wordId: this.state.wordId,\n                    text: this.state.exampleToAdd\n                }\n            )\n        })\n            .then(() => {\n                this.setState({exampleToAdd: ''});\n                this.fetchExamples();\n            })\n            .catch(err => console.log(err));\n        e.preventDefault();\n    };\n\n    render() {\n        const {examples} = this.state;\n        return (\n            <div id=\"test\" className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleTextarea\">Type example here</label>\n                        <textarea\n                            className=\"form-control\"\n                            value={this.state.exampleToAdd}\n                            onChange={this.textareaHandleChange}\n                            rows=\"3\"/>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-outline-success\">Add example</button>\n                </form>\n                <div>\n                    <ul className=\"list-group list-group-flush\" id=\"examplesList\">\n                        {\n                            examples ?\n                                examples.map((item, key) => {\n                                    return <li className=\"list-group-item\" key={key}>\n                                        {item.text}\n                                    </li>\n                                })\n                                :\n                                null\n                        }\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Header from './components/header/header';\nimport Words from './components/words/words';\nimport Examples from './components/examples/examples';\nimport Practice from './components/examples/practice';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction App() {\n\n        return (\n            <BrowserRouter>\n                <Header/>\n                <Route exact path={\"/\"} component={Words}/>\n                <Route exact path={\"/example\"} component={Examples}/>\n                <Route exact path={\"/practice/:id\"} component={Practice}/>\n            </BrowserRouter>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}