{"version":3,"sources":["components/dictionaryLinks/dictionaryLinks.js","components/words/words.js","components/words/tableHeader.js","components/groups/groups.js","components/examples/examples.js","components/examples/practice.js","App.js","serviceWorker.js","index.js"],"names":["dictionaryLinks","props","word","Fragment","href","className","rel","target","EditableContext","React","createContext","TextArea","Input","EditableCell","getInput","renderCell","getFieldDecorator","editing","dataIndex","title","record","inputType","children","index","restProps","Item","style","margin","rules","required","message","initialValue","Consumer","this","Component","Words","openNotificationWithIcon","type","description","notification","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","ref","node","searchInput","placeholder","value","onChange","e","onPressEnter","handleSearch","width","marginBottom","display","onClick","icon","size","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","state","searchedColumn","highlightStyle","backgroundColor","searchWords","searchText","autoEscape","textToHighlight","console","log","setState","textareaHandleChange","wordsToAdd","handleSubmit","axios","post","window","rest","apiUrl","JSON","stringify","words","headers","then","fetchWords","catch","err","response","preventDefault","deleteWord","wordId","delete","isEditing","key","editingKey","cancel","saveOnTheServer","item","row","patch","id","groups","selectedWords","showAddWordsToGroup","selectedGroupId","isLoading","totalPages","pageNumber","pageSize","columns","editable","sorter","a","b","name","localeCompare","sortDirections","placement","content","convertExamplesArrToStr","examples","trigger","practiced","Date","last","createdAt","form","save","onConfirm","disabled","edit","retArr","forEach","x","push","get","resp","data","exampleArr","convertedWord","length","map","sort","reverse","toLocaleString","validateFields","error","newData","findIndex","splice","components","body","cell","col","onCell","Provider","rows","bordered","dataSource","rowClassName","pagination","defaultPageSize","Form","create","tableHeader","scope","Groups","newGroupName","fetch","method","mode","cache","credentials","redirect","referrer","fetchGroups","newGroupNameHandleChange","handleGroupClick","selectedGroup","deleteGroup","onSubmit","htmlFor","lastPractice","Examples","deleteExample","fetchExamples","wordCreatedAt","that","rowKey","exampleToAdd","fetchTheWord","Number","match","params","Content","Layout","Footer","Sider","App","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","theme","defaultSelectedKeys","to","exact","path","component","Practice","textAlign","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54a2edda.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function dictionaryLinks(props) {\n    const word = props.word;\n\n    return (\n        <React.Fragment>\n            <a href={\"https://translate.google.ru/#view=home&op=translate&sl=en&tl=ru&text=\" + word}\n               className=\"badge badge-primary\" rel=\"noopener noreferrer\" target=\"_blank\">G</a>&nbsp;\n            <a href={\"https://dictionary.cambridge.org/dictionary/english/\" + word}\n               className=\"badge badge-secondary\" rel=\"noopener noreferrer\" target=\"_blank\">C</a>&nbsp;\n            <a href={\"https://www.urbandictionary.com/define.php?term=\" + word}\n               className=\"badge badge-info\" rel=\"noopener noreferrer\" target=\"_blank\">U</a>&nbsp;\n            <a href={\"https://www.dictionary.com/browse/\" + word}\n               className=\"badge badge-light\" rel=\"noopener noreferrer\" target=\"_blank\">D</a>&nbsp;\n            <a href={\"https://youglish.com/search/\" + word + \"/us\"}\n               className=\"badge badge-danger\" rel=\"noopener noreferrer\" target=\"_blank\">Y</a>\n        </React.Fragment>\n    )\n}\n","import React from 'react';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport { Button, Divider, Form, Icon, Input, Popconfirm, Table, Popover, notification } from 'antd';\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\nimport Highlighter from 'react-highlight-words';\nimport axios from 'axios';\n\nconst EditableContext = React.createContext();\n\nconst { TextArea } = Input;\n\nclass EditableCell extends React.Component {\n  getInput = () => {\n    return <Input />;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ],\n              initialValue: record[dataIndex],\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n  }\n}\n\nclass Words extends React.Component {\n  openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description,\n    });\n  };\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon=\"search\"\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => (\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n    onFilter: (value, record) => {\n      if (record[dataIndex] !== null) {\n        return record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase())}\n    },\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    console.log(selectedKeys, confirm, dataIndex);\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  convertExamplesArrToStr(examples) {\n    let retArr = [];\n    examples.forEach(x => retArr.push(<p>{x.text}</p>));\n    return (<div>{retArr}</div>);\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      words: [],\n      groups: [],\n      selectedWords: [],\n      wordsToAdd: '',\n      showAddWordsToGroup: false,\n      selectedGroupId: undefined,\n      isLoading: false,\n      totalPages: 0,\n      pageNumber: 0,\n      pageSize: 2000,\n      editingKey: '',\n      searchText: '',\n      searchedColumn: '',\n    };\n\n    this.columns = [\n      {\n        title: 'The word',\n        dataIndex: 'name',\n        width: '10%',\n        editable: true,\n        sorter: (a, b) => a.name.localeCompare(b.name),\n        sortDirections: ['descend', 'ascend'],\n        ...this.getColumnSearchProps('name')\n      },\n      {\n        title: 'Practiced',\n        dataIndex: 'practiced',\n        width: '10%',\n        render: (text, record) => {\n          return (\n            <Popover placement=\"bottomLeft\" content={this.convertExamplesArrToStr(record.examples)} trigger=\"hover\">\n              {record.practiced}\n            </Popover>\n          );\n        },\n        editable: false,\n        sorter: (a, b) => a.practiced - b.practiced,\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Last',\n        dataIndex: 'last',\n        width: '10%',\n        editable: false,\n        sorter: (a, b) => new Date(a.last) - new Date(b.last),\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Added',\n        dataIndex: 'createdAt',\n        width: '10%',\n        editable: false,\n        sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Dictionaries',\n        dataIndex: 'dictionaries',\n        width: '10%',\n        render: (text, record) => {\n          return (\n            <span>\n              <DictionaryLinks word={record.name} />\n            </span>\n          );\n        },\n      },\n      {\n        title: 'Operation',\n        dataIndex: 'operation',\n        width: '20%',\n        render: (text, record) => {\n          const { editingKey } = this.state;\n          const editable = this.isEditing(record);\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    href={'no-action'}\n                    onClick={(e) => this.save(e, form, record.key)}\n                    style={{ marginRight: 8 }}\n                  >\n                    Save\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.cancel(record.key)}>\n                <a href={'no-action'}>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <>\n              <a\n                rel=\"noopener noreferrer\" target=\"_blank\"\n                href={'/practice/' + record.key}>\n                Practice\n              </a> - <a href={'no-action'} disabled={editingKey !== ''} onClick={\n              (e) => this.edit(record.key, e)}>\n              Edit\n            </a> - <a href={\"delete/\" + record.key} onClick={e => {\n              this.deleteWord(e, record.key)\n            }}>Del</a>\n            </>\n          );\n        },\n      },\n    ];\n  }\n\n  componentDidMount() {\n    this.fetchWords(0);\n  }\n\n  fetchWords(pageNumber) {\n    axios.get(`${window.rest.apiUrl}/api/word?size=${this.state.pageSize}&page=${pageNumber}`)\n    .then((resp) => {\n      let words = [];\n      resp.data.content.forEach(item => {\n        const pullLastPracticedDate = (exampleArr) => {\n          if (exampleArr !== undefined && exampleArr.length > 0) {\n            const val = exampleArr.map(function (e) {\n              return e.createdAt;\n            }).sort().reverse()[0];\n            return val.toLocaleString('ru-RU')\n          } else {\n            return null;\n          }\n        };\n        const convertedWord = {\n          key: item.id.toString(),\n          practiced: item.examples.length,\n          last: pullLastPracticedDate(item.examples),\n          ...item\n        };\n        words.push(convertedWord);\n      });\n      this.setState({\n        words,\n      })\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t fetch words', err.response))\n  }\n\n  fetchGroups() {\n    axios.get(`${window.rest.apiUrl}/api/group`)\n    .then((resp) => {\n      this.setState({ groups: resp.data })\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t fetch groups', err.response))\n  }\n\n  textareaHandleChange = (e) => {\n    this.setState({ wordsToAdd: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    axios.post(`${window.rest.apiUrl}/api/word/create-word-list`, JSON.stringify({ words: this.state.wordsToAdd }), { headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }})\n    .then(() => {\n      this.setState({ wordsToAdd: '' });\n      this.fetchWords();\n      this.openNotificationWithIcon('success',\n        'New words added', 'New words successfully added')\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t create words', err.response));\n    e.preventDefault();\n  };\n\n  deleteWord = (e, wordId) => {\n    e.preventDefault();\n    axios.delete(`${window.rest.apiUrl}/api/word/${wordId}`)\n    .then(() => {\n      this.fetchWords();\n      this.openNotificationWithIcon('success',\n        'The word deleted', 'The word successfully deleted')\n    })\n    .catch(err => err => this.openNotificationWithIcon('error',\n      'Can\\'t delete a word', err.response));\n  };\n\n  isEditing = record => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(e, form, key) {\n    e.preventDefault();\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.words];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.saveOnTheServer(item, row);\n        this.setState({ words: newData, editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ words: newData, editingKey: '' });\n      }\n    });\n  }\n\n  saveOnTheServer = (item, row) => {\n    console.log(item, row);\n    axios.patch(`${window.rest.apiUrl}/api/word/${item.id}`, JSON.stringify(row), {headers: {\n      'Content-Type': 'application/json',\n    }})\n    .then(() => {\n      this.openNotificationWithIcon('success',\n        'The word modified', 'The word successfully modified')\n    })\n    .catch(err => err => this.openNotificationWithIcon('error',\n      'Can\\'t modify a word', err.response));\n  };\n\n  edit(key, e) {\n    e.preventDefault();\n    this.setState({ editingKey: key });\n  }\n\n  render() {\n    const { words } = this.state;\n\n    const components = {\n      body: {\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <EditableContext.Provider value={this.props.form}>\n        <TextArea\n          className=\"form-control\"\n          rows=\"3\"\n          value={this.state.wordsToAdd}\n          onChange={this.textareaHandleChange}\n        />\n        <Button type=\"submit\" onClick={this.handleSubmit}>\n          Add words\n        </Button>\n        <Divider />\n        <Table\n          components={components}\n          bordered\n          dataSource={words}\n          columns={columns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: this.cancel,\n            defaultPageSize: 100,\n          }}\n        />\n      </EditableContext.Provider>\n    );\n  }\n}\n\nexport default Form.create()(Words);\n","import React from \"react\";\n\nexport default function tableHeader() {\n    return (\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">The word</th>\n            <th scope=\"col\" className=\"d-lg-none\">Word id</th>\n            <th scope=\"col\">Added</th>\n            <th scope=\"col\">Practiced</th>\n            <th scope=\"col\">Last</th>\n            <th scope=\"col\">Dictionaries</th>\n            <th scope=\"col\">Practice</th>\n            <th scope=\"col\">Manage</th>\n        </tr>\n        </thead>\n    )\n}","import React from 'react';\nimport TableHeader from \"../words/tableHeader\";\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\nimport axios from 'axios';\n\nexport default class Groups extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            words: [],\n            groups: [],\n            selectedWords: [],\n            newGroupName: '',\n            selectedGroup: null,\n        }\n    }\n\n    componentDidMount() {\n        this.fetchGroups();\n    }\n\n    fetchGroups() {\n        axios.get(`${window.rest.apiUrl}/api/group`)\n            .then((resp) => {\n                this.setState({groups: resp.data})\n            })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.newGroupName.length > 0) {\n            fetch(`${window.rest.apiUrl}/api/group`, {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                redirect: 'follow',\n                referrer: 'no-referrer',\n                body: JSON.stringify(\n                    {\n                        name: this.state.newGroupName,\n                    }\n                )\n            })\n                .then(() => {\n                    this.setState({newGroupName: ''});\n                    this.fetchGroups();\n                })\n                .catch(err => console.log(err));\n        }\n    };\n\n    newGroupNameHandleChange = (e) => {\n        this.setState({newGroupName: e.target.value});\n    };\n\n    handleGroupClick = (e, key) => {\n        e.preventDefault();\n        const selectedGroup = this.state.groups[key];\n        this.setState({words: this.state.groups[key].words, selectedGroup: selectedGroup});\n    };\n\n    deleteGroup = (e, id) => {\n        e.preventDefault();\n        e.preventDefault();\n        fetch(`${window.rest.apiUrl}/api/group/${id}`, {\n            method: 'DELETE',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n        })\n            .then(() => {\n                this.fetchGroups()\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n        const {groups, words, selectedGroup} = this.state;\n\n        return (\n            <div id=\"test\" className=\"container\">\n                <h2>Manage groups</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <br/>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"newWordsTextarea\">New group name&nbsp;</label>\n                        <input\n                            value={this.state.newGroupName}\n                            onChange={this.newGroupNameHandleChange}\n                            type={\"text\"}\n                        />&nbsp;\n                        <button type=\"submit\" className=\"btn btn-outline-success\">\n                            Create group\n                        </button>\n                    </div>\n                </form>\n                <ul>\n                    {\n                        groups ?\n                            groups.map((item, key) => {\n                                return <li key={item.id}>\n                                    <a href={\"delete/\" + item.id} onClick={e => {\n                                        this.deleteGroup(e, item.id)\n                                    }}>Del</a>\n                                    [{item.createdAt}]\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <a href={item.id} onClick={(e) => this.handleGroupClick(e, key)} key={key}>\n                                        {item.name}\n                                    </a>\n                                </li>\n\n                            })\n                            :\n                            null\n                    }\n                </ul>\n                {selectedGroup ?\n                    <div>\n                        <h1>{selectedGroup.name}</h1>\n                        <table className=\"table table-striped\">\n                            <TableHeader/>\n                            <tbody>\n                            {\n                                words ?\n                                    words.map((item, key) => {\n                                        let lastPractice;\n                                        if (item.examples.length > 0) {\n                                            lastPractice = item.examples[item.examples.length - 1].createdAt\n                                        } else {\n                                            lastPractice = 'never';\n                                        }\n                                        return <tr key={item.id}>\n                                            <th scope=\"row\">{key + 1}</th>\n                                            <td>{item.name}</td>\n                                            <td>{item.createdAt}</td>\n                                            <td>{item.examples.length}</td>\n                                            <td>{lastPractice}</td>\n                                            <td><DictionaryLinks word={item.name}/></td>\n                                            <td>\n                                                <a\n                                                    rel=\"noopener noreferrer\" target=\"_blank\"\n                                                    href={'/practice/' + item.id}>\n                                                    Practice\n                                                </a>\n                                            </td>\n                                            <td>\n                                                <a href={item.id} onClick={e => {e.preventDefault()}}>Del</a>\n                                                &nbsp;|&nbsp;\n                                                <a href={item.id} onClick={e => {e.preventDefault()}}>Edit</a>\n                                            </td>\n                                        </tr>\n                                    })\n                                    :\n                                    null\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                    : null}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\nimport { Button, Divider, Form, Icon, Input, notification, Popconfirm, Table } from \"antd\";\nimport Highlighter from \"react-highlight-words\";\nimport axios from 'axios';\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  getInput = () => {\n    return <Input/>;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ],\n              initialValue: record[dataIndex],\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n  }\n}\n\nclass Examples extends React.Component {\n  openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description,\n    });\n  };\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon=\"search\"\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => (\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }}/>\n    ),\n    onFilter: (value, record) => {\n      if (record[dataIndex] !== null) {\n        return record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase())\n      }\n    },\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    console.log(selectedKeys, confirm, dataIndex);\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      examples: [],\n      editingKey: '',\n      isLoading: true,\n    };\n\n    this.columns = [\n      {\n        title: 'The word',\n        dataIndex: 'word',\n        width: '8%',\n        editable: false,\n        sorter: (a, b) => a.word.localeCompare(b.word),\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Example',\n        dataIndex: 'text',\n        width: '24%',\n        editable: true,\n        sorter: (a, b) => a.text.localeCompare(b.text),\n        sortDirections: ['descend', 'ascend'],\n        ...this.getColumnSearchProps('text')\n      },\n      {\n        title: 'Dictionaries',\n        dataIndex: 'dictionaries',\n        width: '8%',\n        render: (text, record) => {\n          return (\n            <span>\n              <DictionaryLinks word={record.word}/>\n            </span>\n          );\n        },\n      },\n      {\n        title: 'Example date',\n        dataIndex: 'createdAt',\n        width: '10%',\n        editable: false,\n        sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Word date',\n        dataIndex: 'wordCreatedAt',\n        width: '10%',\n        editable: false,\n        sorter: (a, b) => new Date(a.wordCreatedAt) - new Date(b.wordCreatedAt),\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Operation',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => {\n          const { editingKey } = this.state;\n          const editable = this.isEditing(record);\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    href={'no-action'}\n                    onClick={(e) => this.save(e, form, record.id)}\n                    style={{ marginRight: 8 }}\n                  >\n                    Save\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.cancel(record.id)}>\n                <a href={'no-action'}>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <>\n              <a\n                rel=\"noopener noreferrer\" target=\"_blank\"\n                href={'/practice/' + record.wordId}>\n                Practice\n              </a> - <a href={'no-action'} disabled={editingKey !== ''} onClick={\n              (e) => this.edit(record.id, e)}>\n              Edit\n            </a> - <a href={\"delete/\" + record.id} onClick={e => {\n              this.deleteExample(e, record.id)\n            }}>Del</a>\n            </>\n          );\n        },\n      },\n    ];\n  }\n\n  componentDidMount() {\n    this.fetchExamples();\n  }\n\n  fetchExamples() {\n    this.setState({ isLoading: true });\n    const that = this;\n    axios.get(`${window.rest.apiUrl}/api/example`)\n    .then((resp) => resp.data)\n    .then(function (data) {\n      that.setState({ examples: data, isLoading: false });\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t fetch examples', err.response))\n  }\n\n  deleteExample = (e, id) => {\n    e.preventDefault();\n    axios.delete(`${window.rest.apiUrl}/api/example/${id}`)\n    .then(() => {\n      this.fetchExamples();\n      this.openNotificationWithIcon('success',\n        'The example deleted', 'The example successfully deleted')\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t fetch words', err.response));\n  };\n\n  isEditing = record => record.id === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(e, form, key) {\n    e.preventDefault();\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.examples];\n      const index = newData.findIndex(item => key === item.id);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.saveOnTheServer(item, row);\n        this.setState({ examples: newData, editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ examples: newData, editingKey: '' });\n      }\n    });\n  }\n\n  saveOnTheServer = (item, row) => {\n    console.log(item, row);\n    axios.patch(`${window.rest.apiUrl}/api/example/${item.id}`, JSON.stringify(row), { headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }})\n    .then(() => {\n      this.openNotificationWithIcon('success',\n        'The example modified', 'The example successfully modified')\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t fetch words', err.response));\n  };\n\n  edit(key, e) {\n    e.preventDefault();\n    this.setState({ editingKey: key });\n  }\n\n  render() {\n    const { examples } = this.state;\n\n    const components = {\n      body: {\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <EditableContext.Provider value={this.props.form}>\n        <Divider/>\n        <Table\n          components={components}\n          bordered\n          dataSource={examples}\n          columns={columns}\n          rowKey={\"id\"}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: this.cancel,\n            defaultPageSize: 100,\n          }}\n        />\n      </EditableContext.Provider>\n    );\n  }\n}\n\nexport default Form.create()(Examples);\n","import React from 'react';\nimport DictionaryLinks from \"../dictionaryLinks/dictionaryLinks\";\nimport axios from 'axios';\nimport { notification } from 'antd';\n\nexport default class Examples extends React.Component {\n  openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description,\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: '',\n      wordCreatedAt: '',\n      wordId: Number(props.match.params.id),\n      examples: [],\n      exampleToAdd: '',\n    }\n  }\n\n  componentDidMount() {\n    this.fetchTheWord();\n  }\n\n  fetchTheWord() {\n    const that = this;\n    axios.get(`${window.rest.apiUrl}/api/word/${this.state.wordId}`)\n    .then(function (resp) {\n      that.setState({\n        examples: resp.data.examples,\n        word: resp.data.name,\n        wordCreatedAt: resp.data.createdAt,\n      });\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t fetch examples', err.response))\n  }\n\n  textareaHandleChange = (e) => {\n    this.setState({ exampleToAdd: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    axios.post(`${window.rest.apiUrl}/api/word/example`, JSON.stringify(\n        {\n          wordId: this.state.wordId,\n          text: this.state.exampleToAdd\n        }\n      ), {headers: {\n      'Content-Type': 'application/json',\n    }})\n    .then(() => {\n      this.setState({ exampleToAdd: '' });\n      this.fetchTheWord();\n      this.openNotificationWithIcon('success',\n        'The example saved', 'The example successfully saved')\n    })\n    .catch(err => this.openNotificationWithIcon('error',\n      'Can\\'t save an example', err.response));\n    e.preventDefault();\n  };\n\n  render() {\n    const { examples } = this.state;\n    return (\n      <div id=\"test\" className=\"container\">\n        <h2>{this.state.word} [added {this.state.wordCreatedAt}]</h2>\n        <DictionaryLinks word={this.state.word} />\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleTextarea\">Type example here</label>\n            <textarea\n              className=\"form-control\"\n              value={this.state.exampleToAdd}\n              onChange={this.textareaHandleChange}\n              rows=\"3\" />\n          </div>\n          <button type=\"submit\" className=\"btn btn-outline-success\">Add example</button>\n        </form>\n        <br />\n        <div>\n          <ul className=\"list-group list-group-flush\" id=\"examplesList\">\n            {\n              examples ?\n                examples.map((item, key) => {\n                  return <li className=\"list-group-item\" key={key}>\n                    [{item.createdAt}]\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    {item.text}\n                  </li>\n                })\n                :\n                null\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Words from './components/words/words';\nimport Groups from './components/groups/groups';\nimport Examples from './components/examples/examples';\nimport Practice from './components/examples/practice';\nimport { BrowserRouter, Link, Route } from \"react-router-dom\";\nimport { Layout, Menu } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Content, Footer, Sider } = Layout;\n\nfunction App() {\n\n  return (\n\n    <BrowserRouter>\n      <Layout>\n        <Sider\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n          onBreakpoint={broken => {\n            console.log(broken);\n          }}\n          onCollapse={(collapsed, type) => {\n            console.log(collapsed, type);\n          }}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n            <Menu.Item key=\"1\">\n              <Link to={'/'}>\n                <span className=\"nav-text\">\n                  Words\n                </span>\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Link to={'/example'}>\n                <span className=\"nav-text\">\n                  Examples\n                </span>\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Link to={'/groups'}>\n                <span className=\"nav-text\">\n                  Groups\n                </span>\n              </Link>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Content style={{ margin: '24px 16px 0' }}>\n            <Route exact path={\"/\"} component={Words} />\n            <Route exact path={\"/example\"} component={Examples} />\n            <Route exact path={\"/practice/:id\"} component={Practice} />\n            <Route exact path={\"/groups\"} component={Groups} />\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>&nbsp;&copy; 2020 Language study service</Footer>\n        </Layout>\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}